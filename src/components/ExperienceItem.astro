---
import LinkInline from "./LinkInline.astro";

interface Props {
  title: string;
  company: string;
  description: string;
  excerpt: string;
  link?: string;
  date: string;
}

// Destructure the props
const { title, company, description, link, date, excerpt } = Astro.props;

// Generate unique ID for each modal instance
const modalId = `progress-modal-${title.replace(/\s+/g, "-").toLowerCase()}`;
---

<div
  class="relative mx-12 pb-12 grid before:absolute before:left-[-35px] before:block before:h-full before:border-l-2 before:border-white/15 before:content-[''] md:grid-cols-5 md:gap-10 md:space-x-4]"
>
  <div class="relative pb-5 mb:pb-12 md:col-span-2">
    <div class="sticky top-0">
      <span class="text-blue-400 -left-[42px] absolute rounded-full text-5xl"
        >&bull;</span
      >
      <h3 class="text-xl font-bold text-blue-400">{title}</h3>
      <h4 class="font-semibold text-xl">{company}</h4>
      <time class="p-0 m-0 text-sm">{date}</time>
    </div>
  </div>

  <div class="relative flex flex-col gap-2 pb-4 text-gray-300 md:col-span-3">
    {excerpt}

    <button
      data-modal-target={modalId}
      data-modal-toggle={modalId}
      class="inline-flex items-center text-lg font-medium text-green-400 hover:text-green-700 duration-300"
    >
      Read More
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-5 icon icon-tabler icon-tabler-chevron-right"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        stroke-width="2"
        stroke="currentColor"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <>
          <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
          <path d="M9 6l6 6l-6 6"></path>
        </>
      </svg>
    </button>

    <!-- Modal -->
    <div
      id={modalId}
      tabindex="-1"
      aria-hidden="true"
      class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-dvh max-h-full bg-black/10 backdrop-blur-sm duration-300"
    >
      <div class="relative p-4 w-full max-w-md max-h-full">
        <!-- Modal content -->
        <div class="bg-[#222834] rounded-lg shadow">
          <header class="flex p-4 md:p-5">
            <h3 class="mb-1 w-11/12 text-xl font-bold text-white">
              {title}
            </h3>
            <button
              type="button"
              class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 inline-flex justify-center items-center"
              data-modal-hide={modalId}
            >
              <svg
                class="w-3 h-3"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 14 14"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
              </svg>
              <span class="sr-only">Close modal</span>
            </button>
          </header>

          <div class="p-4 pt-0 md:p-5">
            <p class="text-white mb-6">{description}</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script lang="js">
  document.addEventListener("DOMContentLoaded", () => {
    const body = document.querySelector("body");
    // Function to open modal
    const openModal = (modalId) => {
      const modal = document.getElementById(modalId);

      if (modal) {
        modal.classList.remove("hidden");
        modal.classList.add("flex");
        body.classList.add("overflow-hidden");
        modal.setAttribute("aria-hidden", "false");
      }
    };

    // Function to close modal
    const closeModal = (modalId) => {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add("hidden");
        body.classList.remove("overflow-hidden");
        modal.setAttribute("aria-hidden", "true");
      }
    };

    // Add event listeners to modal toggle buttons
    document.querySelectorAll("[data-modal-toggle]").forEach((button) => {
      button.addEventListener("click", () => {
        const modalId = button.getAttribute("data-modal-toggle");
        openModal(modalId);
      });
    });

    // Add event listeners to modal close buttons
    document.querySelectorAll("[data-modal-hide]").forEach((button) => {
      button.addEventListener("click", () => {
        const modalId = button.getAttribute("data-modal-hide");
        closeModal(modalId);
      });
    });
  });
</script>
